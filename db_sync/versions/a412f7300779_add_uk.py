"""add uk

Revision ID: a412f7300779
Revises: b959255238c5
Create Date: 2025-10-25 16:17:49.930905

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision: str = "a412f7300779"
down_revision: Union[str, Sequence[str], None] = "b959255238c5"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "quants_wqb_data_field",
        sa.Column(
            "dataset_id", sa.VARCHAR(length=127), nullable=False, comment="数据集ID"
        ),
    )
    op.add_column(
        "quants_wqb_data_field",
        sa.Column(
            "payramid_multiplier",
            mysql.DECIMAL(precision=20, scale=8),
            server_default="0.00000000",
            nullable=False,
            comment="金字塔主题乘数",
        ),
    )
    op.add_column(
        "quants_wqb_data_field",
        sa.Column(
            "user_count",
            mysql.DECIMAL(precision=20, scale=8),
            server_default="0.00000000",
            nullable=False,
            comment="使用该字段的用户数",
        ),
    )
    op.add_column(
        "quants_wqb_data_field",
        sa.Column(
            "alpha_count",
            mysql.DECIMAL(precision=20, scale=8),
            server_default="0.00000000",
            nullable=False,
            comment="使用该字段的因子数",
        ),
    )
    op.drop_index(
        op.f("ix_quants_wqb_data_field_data_set_id"), table_name="quants_wqb_data_field"
    )
    op.drop_constraint(
        op.f("uix_wqb_data_field_unique"), "quants_wqb_data_field", type_="unique"
    )
    op.create_unique_constraint(
        "uix_wqb_data_field_unique",
        "quants_wqb_data_field",
        ["region", "universe", "delay", "dataset_id", "name"],
    )
    op.create_index(
        op.f("ix_quants_wqb_data_field_dataset_id"),
        "quants_wqb_data_field",
        ["dataset_id"],
        unique=False,
    )
    op.drop_column("quants_wqb_data_field", "users")
    op.drop_column("quants_wqb_data_field", "alphas")
    op.drop_column("quants_wqb_data_field", "data_set_id")
    op.drop_column("quants_wqb_data_field", "pyamid_theme_multiplier")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "quants_wqb_data_field",
        sa.Column(
            "pyamid_theme_multiplier",
            mysql.DECIMAL(precision=20, scale=8),
            server_default=sa.text("0.00000000"),
            nullable=False,
            comment="金字塔主题乘数",
        ),
    )
    op.add_column(
        "quants_wqb_data_field",
        sa.Column(
            "data_set_id", mysql.VARCHAR(length=127), nullable=False, comment="数据集ID"
        ),
    )
    op.add_column(
        "quants_wqb_data_field",
        sa.Column(
            "alphas",
            mysql.DECIMAL(precision=20, scale=8),
            server_default=sa.text("0.00000000"),
            nullable=False,
            comment="使用该字段的因子数",
        ),
    )
    op.add_column(
        "quants_wqb_data_field",
        sa.Column(
            "users",
            mysql.DECIMAL(precision=20, scale=8),
            server_default=sa.text("0.00000000"),
            nullable=False,
            comment="使用该字段的用户数",
        ),
    )
    op.drop_index(
        op.f("ix_quants_wqb_data_field_dataset_id"), table_name="quants_wqb_data_field"
    )
    op.drop_constraint(
        "uix_wqb_data_field_unique", "quants_wqb_data_field", type_="unique"
    )
    op.create_unique_constraint(
        op.f("uix_wqb_data_field_unique"),
        "quants_wqb_data_field",
        ["region", "universe", "delay", "data_set_id", "name"],
    )
    op.create_index(
        op.f("ix_quants_wqb_data_field_data_set_id"),
        "quants_wqb_data_field",
        ["data_set_id"],
        unique=False,
    )
    op.drop_column("quants_wqb_data_field", "alpha_count")
    op.drop_column("quants_wqb_data_field", "user_count")
    op.drop_column("quants_wqb_data_field", "payramid_multiplier")
    op.drop_column("quants_wqb_data_field", "dataset_id")
    # ### end Alembic commands ###
